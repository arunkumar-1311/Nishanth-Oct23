var (
		r            = mux.NewRouter()
		errorLogger  = kithttp.ServerErrorLogger(logger)
		errorEncoder = kithttp.ServerErrorEncoder(encodeErrorResponse)
	)
	options = append(options, errorLogger, errorEncoder)
	//options := []kithttp.ServerOption{
	//	kithttp.ServerErrorLogger(logger),
	//	kithttp.ServerErrorEncoder(encodeError),
	//}
	// HTTP Post - /orders
	r.Methods("POST").Path("/orders").Handler(kithttp.NewServer(
		svcEndpoints.Create,
		decodeCreateRequest,
		encodeResponse,
		options...,
	))
	*gorm.Statement
	GuessConstraintInterfaceAndTable(*gorm.Statement, string)
	
	"github.com/go-kit/kit/endpoint"
	func makeCreateEndpoint(s order.Service) endpoint.Endpoint {
		return func(ctx context.Context, request interface{}) (interface{}, error) {
			req := request.(CreateRequest) // type assertion
			id, err := s.Create(ctx, req.Order)
			return CreateResponse{ID: id, Err: err}, nil
		}
	}

	func decodeChangeStausRequest(_ context.Context, r *http.Request) (request interface{}, err error) {
		var req transport.ChangeStatusRequest
		if e := json.NewDecoder(r.Body).Decode(&req); e != nil {
			return nil, e
		}
		return req, nil
	}
	
	func encodeResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
		if e, ok := response.(errorer); ok && e.error() != nil {
			// Not a Go kit transport error, but a business-logic error.
			// Provide those as HTTP errors.
			encodeErrorResponse(ctx, e.error(), w)
			return nil
		}
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		return json.NewEncoder(w).Encode(response)
	}


	func LogTotalRetailPriceEndpoint(logger log.Logger) endpoint.Middleware {
		return func(next endpoint.Endpoint) endpoint.Endpoint {
			return func(ctx context.Context, request interface{}) (interface{}, error) {
				logger.Log("endpoint", "TotalRetailPriceEndpoint", "msg", "Calling endpoint")
				defer logger.Log("endpoint", "TotalRetailPriceEndpoint", "msg", "Called endpoint")
	
				// diagnostic functionality
	
				return next(ctx, request)
			}
		}
	}














	// Helps to create a user profile for job-site application
	func (e Endpoints) GetAllJobType(svc service.Service) endpoint.Endpoint {
		return func(ctx context.Context, request interface{}) (response interface{}, err error) {
			return
		}
	}
	
	func (e Endpoints) DecodeGetAllJobType(_ context.Context, r *http.Request) (request interface{}, err error) {
		return
	}

func (e Endpoints) EncodeRegisterResponse(ctx context.Context, w http.ResponseWriter, response interface{}) error {
	if err := helper.SendResponse(ctx, w, response); err!=nil{
		level.Debug(logger.GokitLogger(err)).Log()
		return err
	}
	return nil
}
